terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">=3.0.0"  # Replace with the desired version
    }
  }
}

provider "aws" {
  region  = "us-east-1"
  profile = ""  # Replace with your desired AWS profile name
}

# Define the VPC with the specified CIDR block
variable "vpc_cidr" {
  description = "VPC CIDR block"
  type        = string
  default     = "10.10.0.0/16"
}

resource "aws_vpc" "vpc" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = "MYVPC"
  }
}

# Define the Public Subnets with the specified CIDR blocks
variable "public_subnet_cidr" {
  description = "Public Subnet CIDR blocks"
  type        = list(string)
  default     = ["10.10.0.0/24", "10.10.2.0/24"]
}

resource "aws_subnet" "public_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = var.public_subnet_cidr[count.index]
  map_public_ip_on_launch = true

  tags = {
    Name = "PublicSubnet-${count.index + 1}"
  }
}

# Define the Security Group for Autoscaling with inbound and outbound rules
resource "aws_security_group" "autoscaling_sg" {
  name_prefix = "Autoscaling_sg_"
  description = "Autoscaling Security Group"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description = "Allow Inbound HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Define the Internet Gateway and associate it with the VPC
resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = aws_vpc.vpc.id
}

# Define the Route Table and route all traffic to the Internet Gateway
resource "aws_route_table" "project_21_rt" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.internet_gateway.id
  }

  tags = {
    Name = "PublicRouteTable"
  }
}

# Associate the Route Table with the Public Subnets
resource "aws_route_table_association" "project_21_rts" {
  count          = 2
  subnet_id      = aws_subnet.public_subnet[count.index].id
  route_table_id = aws_route_table.project_21_rt.id
}

locals {
  user_data = <<-EOF
              #!/bin/bash
              # Update package repositories
              sudo yum update -y

              # Install Apache web server
              sudo yum install -y httpd

              # Start the Apache service
              sudo systemctl start httpd

              # Enable the Apache service to start on boot
              sudo systemctl enable httpd

              # Create the script file to update index.html
              cat <<EOT > /var/www/html/index.html
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Hello, Emmanuel!</title>
              </head>
              <body>
                  <h1>Hello, World! This Is Emmanuel Baah.</h1>
              </body>
              </html>
              EOT

              # Change the ownership of the index.html file to apache user
              sudo chown apache:apache /var/www/html/index.html

              # Remove the default index.html file if present
              sudo rm -f /var/www/html/index.html.backup

              EOF
}

# Define the Launch Template for EC2 instances in the Autoscaling Group
resource "aws_launch_template" "project_template" {
  name_prefix            = "Project_template"
  image_id               = data.aws_ami.amazon_linux_2.id  # Use data source for AMI lookup
  instance_type          = "t2.micro"
  user_data              = base64encode(local.user_data)
  vpc_security_group_ids = [aws_security_group.autoscaling_sg.id]

  monitoring {
    enabled = true  # Enable detailed monitoring for EC2 instances
  }

  block_device_mappings {
    device_name = "/dev/xvda"
    ebs {
      volume_size = 8
      volume_type = "gp2"
    }
  }
}

# Define the data source to fetch the Amazon Linux 2 AMI ID
data "aws_ami" "amazon_linux_2" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }

  owners = ["amazon"]
}

# Define the Autoscaling Group using the Launch Template and Public Subnets
resource "aws_autoscaling_group" "project_ags" {
  desired_capacity    = 2
  max_size            = 5
  min_size            = 2
  vpc_zone_identifier = aws_subnet.public_subnet.*.id

  launch_template {
    id      = aws_launch_template.project_template.id
    version = "$Latest"
  }
}


